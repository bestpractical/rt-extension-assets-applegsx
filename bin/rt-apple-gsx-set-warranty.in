#!/usr/bin/env perl
### before: #!@PERL@

use strict;
use warnings;

BEGIN {
### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt4-assets/local/lib /opt/rt4-assets/lib);
use RT;
RT::LoadConfig();
RT::Init();
}

use Getopt::Long;
my %opt;
GetOptions( \%opt, 'help|h', );
if ( $opt{help} ) {
    require Pod::Usage;
    Pod::Usage::pod2usage({ verbose => 2 });
    exit;
}

# Sanity check that the extension is configured
die "Apple GSX authentication not configured; please read the documentation for " .
    "RT::Extension::Assets::AppleGSX for more on configuring this extension."
    unless RT->System->FirstAttribute('AppleGSXOptions');

my $gsx  = RT::Extension::Assets::AppleGSX->Client;
die "Apple GSX credentials are incorrect or out-of-date; update them in " .
    "Tools -> Configuration -> Assets -> Apple GSX"
    unless $gsx->Authenticate;

my $serial_name = RT->Config->Get('AppleGSXSerialCF') || "Serial Number";

my $FIELDS_MAP = RT->Config->Get('AppleGSXMap') || {
    'Warranty Status'     => 'warrantyStatus',
    'Warranty Start Date' => 'coverageStartDate',
    'Warranty End Date'   => 'coverageEndDate',
};

my $CHECKS = RT->Config->Get('AppleGSXChecks') || {
    'Trademark' => qr/\bApple(Care)?\b/i,
};

# Check that all of the CFs we reference exist
for my $cfname ($serial_name, keys(%$FIELDS_MAP), keys(%$CHECKS)) {
    my $cf = RT::CustomField->new(RT->SystemUser);
    $cf->Load($cfname);
    die "Custom Field '$cfname' not found" unless $cf->id;
}


my $attr = RT::Attribute->new( RT->SystemUser );
$attr->LoadByNameAndObject( Name => 'AppleGSXTransactionId', Object => RT->System );
unless ( $attr->id ) {
    $attr->Create( Name => 'AppleGSXTransactionId', Object => RT->System );
}


my $serial_cf = RT::CustomField->new(RT->SystemUser);
$serial_cf->Load($serial_name);

my $last_txn_id = $attr->Content;
my $txns = RT::Transactions->new(RT->SystemUser);
$txns->Limit(
    FIELD           => 'ObjectType',
    VALUE           => 'RT::Asset',
);

$txns->Limit(
    FIELD           => 'id',
    VALUE           => $last_txn_id,
    OPERATOR        => '>',
) if $last_txn_id;

$txns->Limit(
    FIELD           => 'Type',
    VALUE           => 'Create',
    SUBCLAUSE       => 'Set',
);

$txns->Limit(
    FIELD           => 'Type',
    VALUE           => 'CustomField',
    SUBCLAUSE       => 'Set',
    ENTRYAGGREGATOR => 'OR',
);

$txns->Limit(
    FIELD           => 'Field',
    VALUE           => $serial_cf->id,
    SUBCLAUSE       => 'Set',
    ENTRYAGGREGATOR => 'AND',
);

my %assets;
while ( my $txn = $txns->Next ) {
    $assets{$txn->ObjectId} ||= $txn->Object;
}

for my $asset ( values %assets ) {
    my @match = grep {$_->[1] and $_->[1] =~ /$CHECKS->{$_->[0]}/}
        map {[$_, $asset->FirstCustomFieldValue($_)]}
            keys %$CHECKS;
    next unless @match;

    if ( my $serial = $asset->FirstCustomFieldValue($serial_name) ) {
        my $info = $gsx->WarrantyStatus($serial);
        if ( $info && $info->{warrantyDetailInfo} ) {
            for my $field ( keys %$FIELDS_MAP ) {
                my $old = $asset->FirstCustomFieldValue($field);
                my $new = $info->{warrantyDetailInfo}{ $FIELDS_MAP->{$field} };
                if ( defined $new ) {
                    $asset->AddCustomFieldValue(
                        Field => $field,
                        Value => $new,
                    ) if ($old || '') ne $new;
                } elsif (defined $old) {
                    $asset->DeleteCustomFieldValue(
                        Field => $field,
                        Value => $old,
                    );
                }
            }
        }
    }
    else {
        for my $field ( keys %$FIELDS_MAP ) {
            my $old = $asset->FirstCustomFieldValue($field);
            if ( defined $old ) {
                $asset->DeleteCustomFieldValue(
                    Field => $field,
                    Value => $old,
                );
            }
        }
    }
}

$attr->SetContent($txns->Last->id) if $txns->Last;

__END__

=head1 NAME

rt-apple-gsx-set-warranty - set warranty info for apple assets

=head1 SYNOPSIS

    rt-apple-gsx-set-warranty

=head1 DESCRIPTION

This script will incrementally set warranty info for apple assets;
running it as a cron job is recommended.

See L<RT::Extension::Assets::AppleGSX> for the necessary RT
configuration.
